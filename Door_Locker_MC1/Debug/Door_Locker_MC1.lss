
Door_Locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  000023c2  00002456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800134  00800134  0000252a  2**0
                  ALLOC
  3 .stab         00002130  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dac  00000000  00000000  0000465c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000081ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009389  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 0c 	call	0x1822	; 0x1822 <main>
      8a:	0c 94 df 11 	jmp	0x23be	; 0x23be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e2       	ldi	r26, 0x2A	; 42
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
#include "UART.h"

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

void UART_init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1 << U2X);
     b4e:	eb e2       	ldi	r30, 0x2B	; 43
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	80 83       	st	Z, r24
	UCSRB = (1 << RXEN) | (1 << TXEN);
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	80 83       	st	Z, r24
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     b5e:	e0 e4       	ldi	r30, 0x40	; 64
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	86 e8       	ldi	r24, 0x86	; 134
     b64:	80 83       	st	Z, r24
	UBRRH = BAUD_PRESCALE >> 8;
     b66:	e0 e4       	ldi	r30, 0x40	; 64
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     b6c:	e9 e2       	ldi	r30, 0x29	; 41
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	80 83       	st	Z, r24
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <UART_sendByte>:

void UART_sendByte(const uint8 data) {
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE))
     b86:	eb e2       	ldi	r30, 0x2B	; 43
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	80 72       	andi	r24, 0x20	; 32
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	b9 f3       	breq	.-18     	; 0xb86 <UART_sendByte+0xc>
		;
	UDR = data;
     b98:	ec e2       	ldi	r30, 0x2C	; 44
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	80 83       	st	Z, r24
}
     ba0:	0f 90       	pop	r0
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <UART_recieveByte>:

uint8 UART_recieveByte(void) {
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC))
     bb0:	eb e2       	ldi	r30, 0x2B	; 43
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	dc f7       	brge	.-10     	; 0xbb0 <UART_recieveByte+0x8>
		;
	return UDR;
     bba:	ec e2       	ldi	r30, 0x2C	; 44
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <UART_sendString>:

void UART_sendString(const uint8 *Str) {
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <UART_sendString+0x6>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9b 83       	std	Y+3, r25	; 0x03
     bd4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     bd6:	19 82       	std	Y+1, r1	; 0x01
     bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <UART_sendString+0x30>
	while (Str[i] !='\0') {
		UART_sendByte(Str[i]);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	9b 81       	ldd	r25, Y+3	; 0x03
     be4:	fc 01       	movw	r30, r24
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	80 81       	ld	r24, Z
     bec:	0e 94 bd 05 	call	0xb7a	; 0xb7a <UART_sendByte>
		i++;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] !='\0') {
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03
     c00:	fc 01       	movw	r30, r24
     c02:	e2 0f       	add	r30, r18
     c04:	f3 1f       	adc	r31, r19
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	39 f7       	brne	.-50     	; 0xbda <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <UART_receiveString>:

void UART_receiveString(uint8 *Str) {
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <UART_receiveString+0xa>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c2c:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	8c 01       	movw	r16, r24
     c3a:	02 0f       	add	r16, r18
     c3c:	13 1f       	adc	r17, r19
     c3e:	0e 94 d4 05 	call	0xba8	; 0xba8 <UART_recieveByte>
     c42:	f8 01       	movw	r30, r16
     c44:	80 83       	st	Z, r24
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <UART_receiveString+0x4e>
	while (Str[i] !='#') {
		i++;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	8c 01       	movw	r16, r24
     c5a:	02 0f       	add	r16, r18
     c5c:	13 1f       	adc	r17, r19
     c5e:	0e 94 d4 05 	call	0xba8	; 0xba8 <UART_recieveByte>
     c62:	f8 01       	movw	r30, r16
     c64:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while (Str[i] !='#') {
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	80 81       	ld	r24, Z
     c78:	83 32       	cpi	r24, 0x23	; 35
     c7a:	31 f7       	brne	.-52     	; 0xc48 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();

	}
	Str[i] = '\0';
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	fc 01       	movw	r30, r24
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	10 82       	st	Z, r1
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 67       	ori	r24, 0x70	; 112
     cba:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     cbc:	88 e3       	ldi	r24, 0x38	; 56
     cbe:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     cc2:	8c e0       	ldi	r24, 0x0C	; 12
     cc4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_sendCommand>
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	e9 97       	sbiw	r28, 0x39	; 57
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     cea:	a2 e3       	ldi	r26, 0x32	; 50
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e2 e3       	ldi	r30, 0x32	; 50
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 7e       	andi	r24, 0xEF	; 239
     cf6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     cf8:	a2 e3       	ldi	r26, 0x32	; 50
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e2 e3       	ldi	r30, 0x32	; 50
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8f 7d       	andi	r24, 0xDF	; 223
     d04:	8c 93       	st	X, r24
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	a0 e8       	ldi	r26, 0x80	; 128
     d0c:	bf e3       	ldi	r27, 0x3F	; 63
     d0e:	8d ab       	std	Y+53, r24	; 0x35
     d10:	9e ab       	std	Y+54, r25	; 0x36
     d12:	af ab       	std	Y+55, r26	; 0x37
     d14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d16:	6d a9       	ldd	r22, Y+53	; 0x35
     d18:	7e a9       	ldd	r23, Y+54	; 0x36
     d1a:	8f a9       	ldd	r24, Y+55	; 0x37
     d1c:	98 ad       	ldd	r25, Y+56	; 0x38
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	4a e7       	ldi	r20, 0x7A	; 122
     d24:	53 e4       	ldi	r21, 0x43	; 67
     d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	89 ab       	std	Y+49, r24	; 0x31
     d30:	9a ab       	std	Y+50, r25	; 0x32
     d32:	ab ab       	std	Y+51, r26	; 0x33
     d34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d36:	69 a9       	ldd	r22, Y+49	; 0x31
     d38:	7a a9       	ldd	r23, Y+50	; 0x32
     d3a:	8b a9       	ldd	r24, Y+51	; 0x33
     d3c:	9c a9       	ldd	r25, Y+52	; 0x34
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	2c f4       	brge	.+10     	; 0xd58 <LCD_sendCommand+0x84>
		__ticks = 1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	98 ab       	std	Y+48, r25	; 0x30
     d54:	8f a7       	std	Y+47, r24	; 0x2f
     d56:	3f c0       	rjmp	.+126    	; 0xdd6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     d58:	69 a9       	ldd	r22, Y+49	; 0x31
     d5a:	7a a9       	ldd	r23, Y+50	; 0x32
     d5c:	8b a9       	ldd	r24, Y+51	; 0x33
     d5e:	9c a9       	ldd	r25, Y+52	; 0x34
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	3f ef       	ldi	r19, 0xFF	; 255
     d64:	4f e7       	ldi	r20, 0x7F	; 127
     d66:	57 e4       	ldi	r21, 0x47	; 71
     d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	4c f5       	brge	.+82     	; 0xdc2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d70:	6d a9       	ldd	r22, Y+53	; 0x35
     d72:	7e a9       	ldd	r23, Y+54	; 0x36
     d74:	8f a9       	ldd	r24, Y+55	; 0x37
     d76:	98 ad       	ldd	r25, Y+56	; 0x38
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e2       	ldi	r20, 0x20	; 32
     d7e:	51 e4       	ldi	r21, 0x41	; 65
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	98 ab       	std	Y+48, r25	; 0x30
     d96:	8f a7       	std	Y+47, r24	; 0x2f
     d98:	0f c0       	rjmp	.+30     	; 0xdb8 <LCD_sendCommand+0xe4>
     d9a:	89 e1       	ldi	r24, 0x19	; 25
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9e a7       	std	Y+46, r25	; 0x2e
     da0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da2:	8d a5       	ldd	r24, Y+45	; 0x2d
     da4:	9e a5       	ldd	r25, Y+46	; 0x2e
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <LCD_sendCommand+0xd2>
     daa:	9e a7       	std	Y+46, r25	; 0x2e
     dac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dae:	8f a5       	ldd	r24, Y+47	; 0x2f
     db0:	98 a9       	ldd	r25, Y+48	; 0x30
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	98 ab       	std	Y+48, r25	; 0x30
     db6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dba:	98 a9       	ldd	r25, Y+48	; 0x30
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	69 f7       	brne	.-38     	; 0xd9a <LCD_sendCommand+0xc6>
     dc0:	14 c0       	rjmp	.+40     	; 0xdea <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc2:	69 a9       	ldd	r22, Y+49	; 0x31
     dc4:	7a a9       	ldd	r23, Y+50	; 0x32
     dc6:	8b a9       	ldd	r24, Y+51	; 0x33
     dc8:	9c a9       	ldd	r25, Y+52	; 0x34
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	98 ab       	std	Y+48, r25	; 0x30
     dd4:	8f a7       	std	Y+47, r24	; 0x2f
     dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
     dd8:	98 a9       	ldd	r25, Y+48	; 0x30
     dda:	9c a7       	std	Y+44, r25	; 0x2c
     ddc:	8b a7       	std	Y+43, r24	; 0x2b
     dde:	8b a5       	ldd	r24, Y+43	; 0x2b
     de0:	9c a5       	ldd	r25, Y+44	; 0x2c
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <LCD_sendCommand+0x10e>
     de6:	9c a7       	std	Y+44, r25	; 0x2c
     de8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     dea:	a2 e3       	ldi	r26, 0x32	; 50
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e2 e3       	ldi	r30, 0x32	; 50
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 64       	ori	r24, 0x40	; 64
     df6:	8c 93       	st	X, r24
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a0 e8       	ldi	r26, 0x80	; 128
     dfe:	bf e3       	ldi	r27, 0x3F	; 63
     e00:	8f a3       	std	Y+39, r24	; 0x27
     e02:	98 a7       	std	Y+40, r25	; 0x28
     e04:	a9 a7       	std	Y+41, r26	; 0x29
     e06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e08:	6f a1       	ldd	r22, Y+39	; 0x27
     e0a:	78 a5       	ldd	r23, Y+40	; 0x28
     e0c:	89 a5       	ldd	r24, Y+41	; 0x29
     e0e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4a e7       	ldi	r20, 0x7A	; 122
     e16:	53 e4       	ldi	r21, 0x43	; 67
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	8b a3       	std	Y+35, r24	; 0x23
     e22:	9c a3       	std	Y+36, r25	; 0x24
     e24:	ad a3       	std	Y+37, r26	; 0x25
     e26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e28:	6b a1       	ldd	r22, Y+35	; 0x23
     e2a:	7c a1       	ldd	r23, Y+36	; 0x24
     e2c:	8d a1       	ldd	r24, Y+37	; 0x25
     e2e:	9e a1       	ldd	r25, Y+38	; 0x26
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e8       	ldi	r20, 0x80	; 128
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3c:	88 23       	and	r24, r24
     e3e:	2c f4       	brge	.+10     	; 0xe4a <LCD_sendCommand+0x176>
		__ticks = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	9a a3       	std	Y+34, r25	; 0x22
     e46:	89 a3       	std	Y+33, r24	; 0x21
     e48:	3f c0       	rjmp	.+126    	; 0xec8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     e4a:	6b a1       	ldd	r22, Y+35	; 0x23
     e4c:	7c a1       	ldd	r23, Y+36	; 0x24
     e4e:	8d a1       	ldd	r24, Y+37	; 0x25
     e50:	9e a1       	ldd	r25, Y+38	; 0x26
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	3f ef       	ldi	r19, 0xFF	; 255
     e56:	4f e7       	ldi	r20, 0x7F	; 127
     e58:	57 e4       	ldi	r21, 0x47	; 71
     e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e5e:	18 16       	cp	r1, r24
     e60:	4c f5       	brge	.+82     	; 0xeb4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e62:	6f a1       	ldd	r22, Y+39	; 0x27
     e64:	78 a5       	ldd	r23, Y+40	; 0x28
     e66:	89 a5       	ldd	r24, Y+41	; 0x29
     e68:	9a a5       	ldd	r25, Y+42	; 0x2a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e2       	ldi	r20, 0x20	; 32
     e70:	51 e4       	ldi	r21, 0x41	; 65
     e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9a a3       	std	Y+34, r25	; 0x22
     e88:	89 a3       	std	Y+33, r24	; 0x21
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <LCD_sendCommand+0x1d6>
     e8c:	89 e1       	ldi	r24, 0x19	; 25
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	98 a3       	std	Y+32, r25	; 0x20
     e92:	8f 8f       	std	Y+31, r24	; 0x1f
     e94:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e96:	98 a1       	ldd	r25, Y+32	; 0x20
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <LCD_sendCommand+0x1c4>
     e9c:	98 a3       	std	Y+32, r25	; 0x20
     e9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea0:	89 a1       	ldd	r24, Y+33	; 0x21
     ea2:	9a a1       	ldd	r25, Y+34	; 0x22
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	9a a3       	std	Y+34, r25	; 0x22
     ea8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eaa:	89 a1       	ldd	r24, Y+33	; 0x21
     eac:	9a a1       	ldd	r25, Y+34	; 0x22
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	69 f7       	brne	.-38     	; 0xe8c <LCD_sendCommand+0x1b8>
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb4:	6b a1       	ldd	r22, Y+35	; 0x23
     eb6:	7c a1       	ldd	r23, Y+36	; 0x24
     eb8:	8d a1       	ldd	r24, Y+37	; 0x25
     eba:	9e a1       	ldd	r25, Y+38	; 0x26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9a a3       	std	Y+34, r25	; 0x22
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	89 a1       	ldd	r24, Y+33	; 0x21
     eca:	9a a1       	ldd	r25, Y+34	; 0x22
     ecc:	9e 8f       	std	Y+30, r25	; 0x1e
     ece:	8d 8f       	std	Y+29, r24	; 0x1d
     ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <LCD_sendCommand+0x200>
     ed8:	9e 8f       	std	Y+30, r25	; 0x1e
     eda:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     edc:	e5 e3       	ldi	r30, 0x35	; 53
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	89 ad       	ldd	r24, Y+57	; 0x39
     ee2:	80 83       	st	Z, r24
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e8       	ldi	r26, 0x80	; 128
     eea:	bf e3       	ldi	r27, 0x3F	; 63
     eec:	89 8f       	std	Y+25, r24	; 0x19
     eee:	9a 8f       	std	Y+26, r25	; 0x1a
     ef0:	ab 8f       	std	Y+27, r26	; 0x1b
     ef2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	69 8d       	ldd	r22, Y+25	; 0x19
     ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	53 e4       	ldi	r21, 0x43	; 67
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8d 8b       	std	Y+21, r24	; 0x15
     f0e:	9e 8b       	std	Y+22, r25	; 0x16
     f10:	af 8b       	std	Y+23, r26	; 0x17
     f12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f14:	6d 89       	ldd	r22, Y+21	; 0x15
     f16:	7e 89       	ldd	r23, Y+22	; 0x16
     f18:	8f 89       	ldd	r24, Y+23	; 0x17
     f1a:	98 8d       	ldd	r25, Y+24	; 0x18
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <LCD_sendCommand+0x262>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 8b       	std	Y+20, r25	; 0x14
     f32:	8b 8b       	std	Y+19, r24	; 0x13
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     f36:	6d 89       	ldd	r22, Y+21	; 0x15
     f38:	7e 89       	ldd	r23, Y+22	; 0x16
     f3a:	8f 89       	ldd	r24, Y+23	; 0x17
     f3c:	98 8d       	ldd	r25, Y+24	; 0x18
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	69 8d       	ldd	r22, Y+25	; 0x19
     f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9c 8b       	std	Y+20, r25	; 0x14
     f74:	8b 8b       	std	Y+19, r24	; 0x13
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <LCD_sendCommand+0x2c2>
     f78:	89 e1       	ldi	r24, 0x19	; 25
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9a 8b       	std	Y+18, r25	; 0x12
     f7e:	89 8b       	std	Y+17, r24	; 0x11
     f80:	89 89       	ldd	r24, Y+17	; 0x11
     f82:	9a 89       	ldd	r25, Y+18	; 0x12
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <LCD_sendCommand+0x2b0>
     f88:	9a 8b       	std	Y+18, r25	; 0x12
     f8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8b 89       	ldd	r24, Y+19	; 0x13
     f8e:	9c 89       	ldd	r25, Y+20	; 0x14
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9c 8b       	std	Y+20, r25	; 0x14
     f94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8b 89       	ldd	r24, Y+19	; 0x13
     f98:	9c 89       	ldd	r25, Y+20	; 0x14
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <LCD_sendCommand+0x2a4>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6d 89       	ldd	r22, Y+21	; 0x15
     fa2:	7e 89       	ldd	r23, Y+22	; 0x16
     fa4:	8f 89       	ldd	r24, Y+23	; 0x17
     fa6:	98 8d       	ldd	r25, Y+24	; 0x18
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9c 8b       	std	Y+20, r25	; 0x14
     fb2:	8b 8b       	std	Y+19, r24	; 0x13
     fb4:	8b 89       	ldd	r24, Y+19	; 0x13
     fb6:	9c 89       	ldd	r25, Y+20	; 0x14
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
     fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbe:	98 89       	ldd	r25, Y+16	; 0x10
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCD_sendCommand+0x2ec>
     fc4:	98 8b       	std	Y+16, r25	; 0x10
     fc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     fc8:	a2 e3       	ldi	r26, 0x32	; 50
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e2 e3       	ldi	r30, 0x32	; 50
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7b       	andi	r24, 0xBF	; 191
     fd4:	8c 93       	st	X, r24
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e8       	ldi	r26, 0x80	; 128
     fdc:	bf e3       	ldi	r27, 0x3F	; 63
     fde:	8b 87       	std	Y+11, r24	; 0x0b
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	ad 87       	std	Y+13, r26	; 0x0d
     fe4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fea:	8d 85       	ldd	r24, Y+13	; 0x0d
     fec:	9e 85       	ldd	r25, Y+14	; 0x0e
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a e7       	ldi	r20, 0x7A	; 122
     ff4:	53 e4       	ldi	r21, 0x43	; 67
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	8f 83       	std	Y+7, r24	; 0x07
    1000:	98 87       	std	Y+8, r25	; 0x08
    1002:	a9 87       	std	Y+9, r26	; 0x09
    1004:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1006:	6f 81       	ldd	r22, Y+7	; 0x07
    1008:	78 85       	ldd	r23, Y+8	; 0x08
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <LCD_sendCommand+0x354>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1028:	6f 81       	ldd	r22, Y+7	; 0x07
    102a:	78 85       	ldd	r23, Y+8	; 0x08
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6b 85       	ldd	r22, Y+11	; 0x0b
    1042:	7c 85       	ldd	r23, Y+12	; 0x0c
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <LCD_sendCommand+0x3b4>
    106a:	89 e1       	ldi	r24, 0x19	; 25
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <LCD_sendCommand+0x3a2>
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <LCD_sendCommand+0x396>
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_sendCommand+0x3de>
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    10ba:	e9 96       	adiw	r28, 0x39	; 57
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	e9 97       	sbiw	r28, 0x39	; 57
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 61       	ori	r24, 0x10	; 16
    10ee:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    10f0:	a2 e3       	ldi	r26, 0x32	; 50
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e2 e3       	ldi	r30, 0x32	; 50
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7d       	andi	r24, 0xDF	; 223
    10fc:	8c 93       	st	X, r24
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e8       	ldi	r26, 0x80	; 128
    1104:	bf e3       	ldi	r27, 0x3F	; 63
    1106:	8d ab       	std	Y+53, r24	; 0x35
    1108:	9e ab       	std	Y+54, r25	; 0x36
    110a:	af ab       	std	Y+55, r26	; 0x37
    110c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110e:	6d a9       	ldd	r22, Y+53	; 0x35
    1110:	7e a9       	ldd	r23, Y+54	; 0x36
    1112:	8f a9       	ldd	r24, Y+55	; 0x37
    1114:	98 ad       	ldd	r25, Y+56	; 0x38
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a e7       	ldi	r20, 0x7A	; 122
    111c:	53 e4       	ldi	r21, 0x43	; 67
    111e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	89 ab       	std	Y+49, r24	; 0x31
    1128:	9a ab       	std	Y+50, r25	; 0x32
    112a:	ab ab       	std	Y+51, r26	; 0x33
    112c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    112e:	69 a9       	ldd	r22, Y+49	; 0x31
    1130:	7a a9       	ldd	r23, Y+50	; 0x32
    1132:	8b a9       	ldd	r24, Y+51	; 0x33
    1134:	9c a9       	ldd	r25, Y+52	; 0x34
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1142:	88 23       	and	r24, r24
    1144:	2c f4       	brge	.+10     	; 0x1150 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	98 ab       	std	Y+48, r25	; 0x30
    114c:	8f a7       	std	Y+47, r24	; 0x2f
    114e:	3f c0       	rjmp	.+126    	; 0x11ce <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1150:	69 a9       	ldd	r22, Y+49	; 0x31
    1152:	7a a9       	ldd	r23, Y+50	; 0x32
    1154:	8b a9       	ldd	r24, Y+51	; 0x33
    1156:	9c a9       	ldd	r25, Y+52	; 0x34
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	57 e4       	ldi	r21, 0x47	; 71
    1160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1164:	18 16       	cp	r1, r24
    1166:	4c f5       	brge	.+82     	; 0x11ba <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1168:	6d a9       	ldd	r22, Y+53	; 0x35
    116a:	7e a9       	ldd	r23, Y+54	; 0x36
    116c:	8f a9       	ldd	r24, Y+55	; 0x37
    116e:	98 ad       	ldd	r25, Y+56	; 0x38
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	98 ab       	std	Y+48, r25	; 0x30
    118e:	8f a7       	std	Y+47, r24	; 0x2f
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <LCD_displayCharacter+0xe4>
    1192:	89 e1       	ldi	r24, 0x19	; 25
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9e a7       	std	Y+46, r25	; 0x2e
    1198:	8d a7       	std	Y+45, r24	; 0x2d
    119a:	8d a5       	ldd	r24, Y+45	; 0x2d
    119c:	9e a5       	ldd	r25, Y+46	; 0x2e
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <LCD_displayCharacter+0xd2>
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a8:	98 a9       	ldd	r25, Y+48	; 0x30
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	98 ab       	std	Y+48, r25	; 0x30
    11ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b2:	98 a9       	ldd	r25, Y+48	; 0x30
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f7       	brne	.-38     	; 0x1192 <LCD_displayCharacter+0xc6>
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ba:	69 a9       	ldd	r22, Y+49	; 0x31
    11bc:	7a a9       	ldd	r23, Y+50	; 0x32
    11be:	8b a9       	ldd	r24, Y+51	; 0x33
    11c0:	9c a9       	ldd	r25, Y+52	; 0x34
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	98 ab       	std	Y+48, r25	; 0x30
    11cc:	8f a7       	std	Y+47, r24	; 0x2f
    11ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d0:	98 a9       	ldd	r25, Y+48	; 0x30
    11d2:	9c a7       	std	Y+44, r25	; 0x2c
    11d4:	8b a7       	std	Y+43, r24	; 0x2b
    11d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <LCD_displayCharacter+0x10e>
    11de:	9c a7       	std	Y+44, r25	; 0x2c
    11e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    11e2:	a2 e3       	ldi	r26, 0x32	; 50
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e2 e3       	ldi	r30, 0x32	; 50
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 64       	ori	r24, 0x40	; 64
    11ee:	8c 93       	st	X, r24
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a0 e8       	ldi	r26, 0x80	; 128
    11f6:	bf e3       	ldi	r27, 0x3F	; 63
    11f8:	8f a3       	std	Y+39, r24	; 0x27
    11fa:	98 a7       	std	Y+40, r25	; 0x28
    11fc:	a9 a7       	std	Y+41, r26	; 0x29
    11fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1200:	6f a1       	ldd	r22, Y+39	; 0x27
    1202:	78 a5       	ldd	r23, Y+40	; 0x28
    1204:	89 a5       	ldd	r24, Y+41	; 0x29
    1206:	9a a5       	ldd	r25, Y+42	; 0x2a
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	4a e7       	ldi	r20, 0x7A	; 122
    120e:	53 e4       	ldi	r21, 0x43	; 67
    1210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	8b a3       	std	Y+35, r24	; 0x23
    121a:	9c a3       	std	Y+36, r25	; 0x24
    121c:	ad a3       	std	Y+37, r26	; 0x25
    121e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1220:	6b a1       	ldd	r22, Y+35	; 0x23
    1222:	7c a1       	ldd	r23, Y+36	; 0x24
    1224:	8d a1       	ldd	r24, Y+37	; 0x25
    1226:	9e a1       	ldd	r25, Y+38	; 0x26
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1234:	88 23       	and	r24, r24
    1236:	2c f4       	brge	.+10     	; 0x1242 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9a a3       	std	Y+34, r25	; 0x22
    123e:	89 a3       	std	Y+33, r24	; 0x21
    1240:	3f c0       	rjmp	.+126    	; 0x12c0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1242:	6b a1       	ldd	r22, Y+35	; 0x23
    1244:	7c a1       	ldd	r23, Y+36	; 0x24
    1246:	8d a1       	ldd	r24, Y+37	; 0x25
    1248:	9e a1       	ldd	r25, Y+38	; 0x26
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	3f ef       	ldi	r19, 0xFF	; 255
    124e:	4f e7       	ldi	r20, 0x7F	; 127
    1250:	57 e4       	ldi	r21, 0x47	; 71
    1252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1256:	18 16       	cp	r1, r24
    1258:	4c f5       	brge	.+82     	; 0x12ac <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125a:	6f a1       	ldd	r22, Y+39	; 0x27
    125c:	78 a5       	ldd	r23, Y+40	; 0x28
    125e:	89 a5       	ldd	r24, Y+41	; 0x29
    1260:	9a a5       	ldd	r25, Y+42	; 0x2a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e2       	ldi	r20, 0x20	; 32
    1268:	51 e4       	ldi	r21, 0x41	; 65
    126a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9a a3       	std	Y+34, r25	; 0x22
    1280:	89 a3       	std	Y+33, r24	; 0x21
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <LCD_displayCharacter+0x1d6>
    1284:	89 e1       	ldi	r24, 0x19	; 25
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	98 a3       	std	Y+32, r25	; 0x20
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
    128c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    128e:	98 a1       	ldd	r25, Y+32	; 0x20
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <LCD_displayCharacter+0x1c4>
    1294:	98 a3       	std	Y+32, r25	; 0x20
    1296:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1298:	89 a1       	ldd	r24, Y+33	; 0x21
    129a:	9a a1       	ldd	r25, Y+34	; 0x22
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	9a a3       	std	Y+34, r25	; 0x22
    12a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a2:	89 a1       	ldd	r24, Y+33	; 0x21
    12a4:	9a a1       	ldd	r25, Y+34	; 0x22
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	69 f7       	brne	.-38     	; 0x1284 <LCD_displayCharacter+0x1b8>
    12aa:	14 c0       	rjmp	.+40     	; 0x12d4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ac:	6b a1       	ldd	r22, Y+35	; 0x23
    12ae:	7c a1       	ldd	r23, Y+36	; 0x24
    12b0:	8d a1       	ldd	r24, Y+37	; 0x25
    12b2:	9e a1       	ldd	r25, Y+38	; 0x26
    12b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	9a a3       	std	Y+34, r25	; 0x22
    12be:	89 a3       	std	Y+33, r24	; 0x21
    12c0:	89 a1       	ldd	r24, Y+33	; 0x21
    12c2:	9a a1       	ldd	r25, Y+34	; 0x22
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	8d 8f       	std	Y+29, r24	; 0x1d
    12c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <LCD_displayCharacter+0x200>
    12d0:	9e 8f       	std	Y+30, r25	; 0x1e
    12d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    12d4:	e5 e3       	ldi	r30, 0x35	; 53
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	89 ad       	ldd	r24, Y+57	; 0x39
    12da:	80 83       	st	Z, r24
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 e8       	ldi	r26, 0x80	; 128
    12e2:	bf e3       	ldi	r27, 0x3F	; 63
    12e4:	89 8f       	std	Y+25, r24	; 0x19
    12e6:	9a 8f       	std	Y+26, r25	; 0x1a
    12e8:	ab 8f       	std	Y+27, r26	; 0x1b
    12ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	69 8d       	ldd	r22, Y+25	; 0x19
    12ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a e7       	ldi	r20, 0x7A	; 122
    12fa:	53 e4       	ldi	r21, 0x43	; 67
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8d 8b       	std	Y+21, r24	; 0x15
    1306:	9e 8b       	std	Y+22, r25	; 0x16
    1308:	af 8b       	std	Y+23, r26	; 0x17
    130a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    130c:	6d 89       	ldd	r22, Y+21	; 0x15
    130e:	7e 89       	ldd	r23, Y+22	; 0x16
    1310:	8f 89       	ldd	r24, Y+23	; 0x17
    1312:	98 8d       	ldd	r25, Y+24	; 0x18
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c 8b       	std	Y+20, r25	; 0x14
    132a:	8b 8b       	std	Y+19, r24	; 0x13
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	69 8d       	ldd	r22, Y+25	; 0x19
    1348:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9c 8b       	std	Y+20, r25	; 0x14
    136c:	8b 8b       	std	Y+19, r24	; 0x13
    136e:	0f c0       	rjmp	.+30     	; 0x138e <LCD_displayCharacter+0x2c2>
    1370:	89 e1       	ldi	r24, 0x19	; 25
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	9a 8b       	std	Y+18, r25	; 0x12
    1376:	89 8b       	std	Y+17, r24	; 0x11
    1378:	89 89       	ldd	r24, Y+17	; 0x11
    137a:	9a 89       	ldd	r25, Y+18	; 0x12
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_displayCharacter+0x2b0>
    1380:	9a 8b       	std	Y+18, r25	; 0x12
    1382:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	8b 89       	ldd	r24, Y+19	; 0x13
    1386:	9c 89       	ldd	r25, Y+20	; 0x14
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9c 8b       	std	Y+20, r25	; 0x14
    138c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	8b 89       	ldd	r24, Y+19	; 0x13
    1390:	9c 89       	ldd	r25, Y+20	; 0x14
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <LCD_displayCharacter+0x2a4>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	6d 89       	ldd	r22, Y+21	; 0x15
    139a:	7e 89       	ldd	r23, Y+22	; 0x16
    139c:	8f 89       	ldd	r24, Y+23	; 0x17
    139e:	98 8d       	ldd	r25, Y+24	; 0x18
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
    13aa:	8b 8b       	std	Y+19, r24	; 0x13
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	98 8b       	std	Y+16, r25	; 0x10
    13b2:	8f 87       	std	Y+15, r24	; 0x0f
    13b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b6:	98 89       	ldd	r25, Y+16	; 0x10
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_displayCharacter+0x2ec>
    13bc:	98 8b       	std	Y+16, r25	; 0x10
    13be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7b       	andi	r24, 0xBF	; 191
    13cc:	8c 93       	st	X, r24
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e8       	ldi	r26, 0x80	; 128
    13d4:	bf e3       	ldi	r27, 0x3F	; 63
    13d6:	8b 87       	std	Y+11, r24	; 0x0b
    13d8:	9c 87       	std	Y+12, r25	; 0x0c
    13da:	ad 87       	std	Y+13, r26	; 0x0d
    13dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	4a e7       	ldi	r20, 0x7A	; 122
    13ec:	53 e4       	ldi	r21, 0x43	; 67
    13ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    13f8:	98 87       	std	Y+8, r25	; 0x08
    13fa:	a9 87       	std	Y+9, r26	; 0x09
    13fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	2c f4       	brge	.+10     	; 0x1420 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	3f c0       	rjmp	.+126    	; 0x149e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1434:	18 16       	cp	r1, r24
    1436:	4c f5       	brge	.+82     	; 0x148a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	6b 85       	ldd	r22, Y+11	; 0x0b
    143a:	7c 85       	ldd	r23, Y+12	; 0x0c
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <LCD_displayCharacter+0x3b4>
    1462:	89 e1       	ldi	r24, 0x19	; 25
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <LCD_displayCharacter+0x3a2>
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f7       	brne	.-38     	; 0x1462 <LCD_displayCharacter+0x396>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <LCD_displayCharacter+0x3de>
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    14b2:	e9 96       	adiw	r28, 0x39	; 57
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <LCD_displayString+0x6>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	9b 83       	std	Y+3, r25	; 0x03
    14d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	fc 01       	movw	r30, r24
    14e4:	e2 0f       	add	r30, r18
    14e6:	f3 1f       	adc	r31, r19
    14e8:	80 81       	ld	r24, Z
    14ea:	0e 94 66 08 	call	0x10cc	; 0x10cc <LCD_displayCharacter>
		i++;
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	8f 5f       	subi	r24, 0xFF	; 255
    14f2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	fc 01       	movw	r30, r24
    1500:	e2 0f       	add	r30, r18
    1502:	f3 1f       	adc	r31, r19
    1504:	80 81       	ld	r24, Z
    1506:	88 23       	and	r24, r24
    1508:	39 f7       	brne	.-50     	; 0x14d8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <LCD_goToRowColumn+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <LCD_goToRowColumn+0x8>
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	8a 83       	std	Y+2, r24	; 0x02
    1526:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3d 83       	std	Y+5, r19	; 0x05
    1530:	2c 83       	std	Y+4, r18	; 0x04
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	c1 f0       	breq	.+48     	; 0x156c <LCD_goToRowColumn+0x56>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	2c f4       	brge	.+10     	; 0x1550 <LCD_goToRowColumn+0x3a>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	61 f0       	breq	.+24     	; 0x1566 <LCD_goToRowColumn+0x50>
    154e:	19 c0       	rjmp	.+50     	; 0x1582 <LCD_goToRowColumn+0x6c>
    1550:	2c 81       	ldd	r18, Y+4	; 0x04
    1552:	3d 81       	ldd	r19, Y+5	; 0x05
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	69 f0       	breq	.+26     	; 0x1574 <LCD_goToRowColumn+0x5e>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	61 f0       	breq	.+24     	; 0x157c <LCD_goToRowColumn+0x66>
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	0b c0       	rjmp	.+22     	; 0x1582 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	80 5c       	subi	r24, 0xC0	; 192
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	80 5f       	subi	r24, 0xF0	; 240
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	80 5b       	subi	r24, 0xB0	; 176
    1580:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_sendCommand>
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <LCD_displayStringRowColumn+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <LCD_displayStringRowColumn+0x8>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	6a 83       	std	Y+2, r22	; 0x02
    15aa:	5c 83       	std	Y+4, r21	; 0x04
    15ac:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	6a 81       	ldd	r22, Y+2	; 0x02
    15b2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <LCD_displayString>
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	62 97       	sbiw	r28, 0x12	; 18
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	9a 8b       	std	Y+18, r25	; 0x12
    15e2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    15e4:	89 89       	ldd	r24, Y+17	; 0x11
    15e6:	9a 89       	ldd	r25, Y+18	; 0x12
    15e8:	9e 01       	movw	r18, r28
    15ea:	2f 5f       	subi	r18, 0xFF	; 255
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	b9 01       	movw	r22, r18
    15f0:	4a e0       	ldi	r20, 0x0A	; 10
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	0e 94 9a 11 	call	0x2334	; 0x2334 <itoa>
   LCD_displayString(buff);
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <LCD_displayString>
}
    1600:	62 96       	adiw	r28, 0x12	; 18
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_sendCommand>
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <KeyPad_getPressedNumber>:
 * */
#elif (N_column==4)
static uint8 keypad_4x4_adjustSwitchNumber(uint8);
#endif

uint8 KeyPad_getPressedNumber(void) {
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <KeyPad_getPressedNumber+0x6>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	uint8 column, row;
	while (1) {

	for (column = 0; column < N_column; ++column) {
    1630:	1a 82       	std	Y+2, r1	; 0x02
    1632:	4c c0       	rjmp	.+152    	; 0x16cc <KeyPad_getPressedNumber+0xa6>

		KEYPAD_PORT_DIR = (0b00010000 << column);
    1634:	ea e3       	ldi	r30, 0x3A	; 58
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	80 e1       	ldi	r24, 0x10	; 16
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <KeyPad_getPressedNumber+0x22>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	2a 95       	dec	r18
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <KeyPad_getPressedNumber+0x1e>
    164c:	80 83       	st	Z, r24
		KEYPAD_PORT_OUT = (~(0b00010000 << column));
    164e:	eb e3       	ldi	r30, 0x3B	; 59
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	80 e1       	ldi	r24, 0x10	; 16
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <KeyPad_getPressedNumber+0x3e>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <KeyPad_getPressedNumber+0x3a>
    1668:	80 95       	com	r24
    166a:	80 83       	st	Z, r24
		for (row = 0; row < N_column; ++row) {
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	28 c0       	rjmp	.+80     	; 0x16c0 <KeyPad_getPressedNumber+0x9a>
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row)) {
    1670:	e9 e3       	ldi	r30, 0x39	; 57
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <KeyPad_getPressedNumber+0x62>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <KeyPad_getPressedNumber+0x5e>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	90 70       	andi	r25, 0x00	; 0
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	91 f4       	brne	.+36     	; 0x16ba <KeyPad_getPressedNumber+0x94>
		#if(N_column==3)
					return KeyPad_4x3_adjustSwithchNumber((row * N_column) + column + 1);
		#else
					return keypad_4x4_adjustSwitchNumber((row * N_column) + column + 1);
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	98 2f       	mov	r25, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	89 0f       	add	r24, r25
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <keypad_4x4_adjustSwitchNumber>
				}
			}

		}
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

	for (column = 0; column < N_column; ++column) {

		KEYPAD_PORT_DIR = (0b00010000 << column);
		KEYPAD_PORT_OUT = (~(0b00010000 << column));
		for (row = 0; row < N_column; ++row) {
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	a8 f2       	brcs	.-86     	; 0x1670 <KeyPad_getPressedNumber+0x4a>

uint8 KeyPad_getPressedNumber(void) {
	uint8 column, row;
	while (1) {

	for (column = 0; column < N_column; ++column) {
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	8a 83       	std	Y+2, r24	; 0x02
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	08 f4       	brcc	.+2      	; 0x16d4 <KeyPad_getPressedNumber+0xae>
    16d2:	b0 cf       	rjmp	.-160    	; 0x1634 <KeyPad_getPressedNumber+0xe>
    16d4:	ad cf       	rjmp	.-166    	; 0x1630 <KeyPad_getPressedNumber+0xa>

000016d6 <keypad_4x4_adjustSwitchNumber>:
		}
	}

}
#elif (N_column==4)
static uint8 keypad_4x4_adjustSwitchNumber(uint8 button_number) {
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <keypad_4x4_adjustSwitchNumber+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <keypad_4x4_adjustSwitchNumber+0x8>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3c 83       	std	Y+4, r19	; 0x04
    16ec:	2b 83       	std	Y+3, r18	; 0x03
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	88 30       	cpi	r24, 0x08	; 8
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <keypad_4x4_adjustSwitchNumber+0x24>
    16f8:	70 c0       	rjmp	.+224    	; 0x17da <keypad_4x4_adjustSwitchNumber+0x104>
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	29 30       	cpi	r18, 0x09	; 9
    1700:	31 05       	cpc	r19, r1
    1702:	5c f5       	brge	.+86     	; 0x175a <keypad_4x4_adjustSwitchNumber+0x84>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <keypad_4x4_adjustSwitchNumber+0x3a>
    170e:	59 c0       	rjmp	.+178    	; 0x17c2 <keypad_4x4_adjustSwitchNumber+0xec>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	25 30       	cpi	r18, 0x05	; 5
    1716:	31 05       	cpc	r19, r1
    1718:	9c f4       	brge	.+38     	; 0x1740 <keypad_4x4_adjustSwitchNumber+0x6a>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <keypad_4x4_adjustSwitchNumber+0x50>
    1724:	48 c0       	rjmp	.+144    	; 0x17b6 <keypad_4x4_adjustSwitchNumber+0xe0>
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	23 30       	cpi	r18, 0x03	; 3
    172c:	31 05       	cpc	r19, r1
    172e:	0c f0       	brlt	.+2      	; 0x1732 <keypad_4x4_adjustSwitchNumber+0x5c>
    1730:	45 c0       	rjmp	.+138    	; 0x17bc <keypad_4x4_adjustSwitchNumber+0xe6>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <keypad_4x4_adjustSwitchNumber+0x68>
    173c:	39 c0       	rjmp	.+114    	; 0x17b0 <keypad_4x4_adjustSwitchNumber+0xda>
    173e:	67 c0       	rjmp	.+206    	; 0x180e <keypad_4x4_adjustSwitchNumber+0x138>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	26 30       	cpi	r18, 0x06	; 6
    1746:	31 05       	cpc	r19, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <keypad_4x4_adjustSwitchNumber+0x76>
    174a:	41 c0       	rjmp	.+130    	; 0x17ce <keypad_4x4_adjustSwitchNumber+0xf8>
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	87 30       	cpi	r24, 0x07	; 7
    1752:	91 05       	cpc	r25, r1
    1754:	0c f0       	brlt	.+2      	; 0x1758 <keypad_4x4_adjustSwitchNumber+0x82>
    1756:	3e c0       	rjmp	.+124    	; 0x17d4 <keypad_4x4_adjustSwitchNumber+0xfe>
    1758:	37 c0       	rjmp	.+110    	; 0x17c8 <keypad_4x4_adjustSwitchNumber+0xf2>
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	3c 81       	ldd	r19, Y+4	; 0x04
    175e:	2c 30       	cpi	r18, 0x0C	; 12
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <keypad_4x4_adjustSwitchNumber+0x90>
    1764:	46 c0       	rjmp	.+140    	; 0x17f2 <keypad_4x4_adjustSwitchNumber+0x11c>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	8d 30       	cpi	r24, 0x0D	; 13
    176c:	91 05       	cpc	r25, r1
    176e:	5c f4       	brge	.+22     	; 0x1786 <keypad_4x4_adjustSwitchNumber+0xb0>
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	3c 81       	ldd	r19, Y+4	; 0x04
    1774:	2a 30       	cpi	r18, 0x0A	; 10
    1776:	31 05       	cpc	r19, r1
    1778:	b1 f1       	breq	.+108    	; 0x17e6 <keypad_4x4_adjustSwitchNumber+0x110>
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	8b 30       	cpi	r24, 0x0B	; 11
    1780:	91 05       	cpc	r25, r1
    1782:	a4 f5       	brge	.+104    	; 0x17ec <keypad_4x4_adjustSwitchNumber+0x116>
    1784:	2d c0       	rjmp	.+90     	; 0x17e0 <keypad_4x4_adjustSwitchNumber+0x10a>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	2e 30       	cpi	r18, 0x0E	; 14
    178c:	31 05       	cpc	r19, r1
    178e:	b9 f1       	breq	.+110    	; 0x17fe <keypad_4x4_adjustSwitchNumber+0x128>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	8e 30       	cpi	r24, 0x0E	; 14
    1796:	91 05       	cpc	r25, r1
    1798:	7c f1       	brlt	.+94     	; 0x17f8 <keypad_4x4_adjustSwitchNumber+0x122>
    179a:	2b 81       	ldd	r18, Y+3	; 0x03
    179c:	3c 81       	ldd	r19, Y+4	; 0x04
    179e:	2f 30       	cpi	r18, 0x0F	; 15
    17a0:	31 05       	cpc	r19, r1
    17a2:	79 f1       	breq	.+94     	; 0x1802 <keypad_4x4_adjustSwitchNumber+0x12c>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	80 31       	cpi	r24, 0x10	; 16
    17aa:	91 05       	cpc	r25, r1
    17ac:	69 f1       	breq	.+90     	; 0x1808 <keypad_4x4_adjustSwitchNumber+0x132>
    17ae:	2f c0       	rjmp	.+94     	; 0x180e <keypad_4x4_adjustSwitchNumber+0x138>
	{
		case 1: return 7;
    17b0:	97 e0       	ldi	r25, 0x07	; 7
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	2e c0       	rjmp	.+92     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 2: return 8;
    17b6:	28 e0       	ldi	r18, 0x08	; 8
    17b8:	2a 83       	std	Y+2, r18	; 0x02
    17ba:	2b c0       	rjmp	.+86     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 3: return 9;
    17bc:	39 e0       	ldi	r19, 0x09	; 9
    17be:	3a 83       	std	Y+2, r19	; 0x02
    17c0:	28 c0       	rjmp	.+80     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    17c2:	85 e2       	ldi	r24, 0x25	; 37
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	25 c0       	rjmp	.+74     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 5: return 4;
    17c8:	94 e0       	ldi	r25, 0x04	; 4
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	22 c0       	rjmp	.+68     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 6: return 5;
    17ce:	25 e0       	ldi	r18, 0x05	; 5
    17d0:	2a 83       	std	Y+2, r18	; 0x02
    17d2:	1f c0       	rjmp	.+62     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 7: return 6;
    17d4:	36 e0       	ldi	r19, 0x06	; 6
    17d6:	3a 83       	std	Y+2, r19	; 0x02
    17d8:	1c c0       	rjmp	.+56     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    17da:	8a e2       	ldi	r24, 0x2A	; 42
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	19 c0       	rjmp	.+50     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 9: return 1;
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	16 c0       	rjmp	.+44     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 10: return 2;
    17e6:	22 e0       	ldi	r18, 0x02	; 2
    17e8:	2a 83       	std	Y+2, r18	; 0x02
    17ea:	13 c0       	rjmp	.+38     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 11: return 3;
    17ec:	33 e0       	ldi	r19, 0x03	; 3
    17ee:	3a 83       	std	Y+2, r19	; 0x02
    17f0:	10 c0       	rjmp	.+32     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    17f2:	8d e2       	ldi	r24, 0x2D	; 45
    17f4:	8a 83       	std	Y+2, r24	; 0x02
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    17f8:	9d e0       	ldi	r25, 0x0D	; 13
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 14: return 0;
    17fe:	1a 82       	std	Y+2, r1	; 0x02
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1802:	2d e3       	ldi	r18, 0x3D	; 61
    1804:	2a 83       	std	Y+2, r18	; 0x02
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1808:	3b e2       	ldi	r19, 0x2B	; 43
    180a:	3a 83       	std	Y+2, r19	; 0x02
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <keypad_4x4_adjustSwitchNumber+0x13c>
				break;
		default: return button_number;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <main>:
 *******************************************************************************/
static bool firstTime = TRUE; //just flag to check if first time or not  used to handle LCD Message
static uint8 count = 0; //counter to handle password size
static uint8 operation = '-'; //Make default operation = '-' it used to add new  or change password,'+' it used to open Door

int main(void) {
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	ef 97       	sbiw	r28, 0x3f	; 63
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_SIZE]; //Array to save the password
	uint8 re_password[PASSWORD_SIZE]; //Array to save re-enter the password
	bool isPassword = TRUE; //boolean to check where save password and with initial value true to start with password
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	8f a7       	std	Y+47, r24	; 0x2f
	bool isRePassword = FALSE; //boolean to check where save password and with initial value false to start with password
    183a:	1e a6       	std	Y+46, r1	; 0x2e
	uint8 pressedKey; //variable to save pressed key from keypad
	UART_init(); //Initialize UART
    183c:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_init(); //Initialize LCD
    1840:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_init>
	LCD_displayStringRowColumn(0, 0, ENTER_YOUR_PASSWORD); //display message into LCD
    1844:	20 e6       	ldi	r18, 0x60	; 96
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	a9 01       	movw	r20, r18
    184e:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
	while (1) {
		pressedKey = KeyPad_getPressedNumber(); //get the pressed pressedKey
    1852:	0e 94 13 0b 	call	0x1626	; 0x1626 <KeyPad_getPressedNumber>
    1856:	8d a7       	std	Y+45, r24	; 0x2d
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	aa ef       	ldi	r26, 0xFA	; 250
    185e:	b3 e4       	ldi	r27, 0x43	; 67
    1860:	8f a3       	std	Y+39, r24	; 0x27
    1862:	98 a7       	std	Y+40, r25	; 0x28
    1864:	a9 a7       	std	Y+41, r26	; 0x29
    1866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	6f a1       	ldd	r22, Y+39	; 0x27
    186a:	78 a5       	ldd	r23, Y+40	; 0x28
    186c:	89 a5       	ldd	r24, Y+41	; 0x29
    186e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a e7       	ldi	r20, 0x7A	; 122
    1876:	53 e4       	ldi	r21, 0x43	; 67
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8b a3       	std	Y+35, r24	; 0x23
    1882:	9c a3       	std	Y+36, r25	; 0x24
    1884:	ad a3       	std	Y+37, r26	; 0x25
    1886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1888:	6b a1       	ldd	r22, Y+35	; 0x23
    188a:	7c a1       	ldd	r23, Y+36	; 0x24
    188c:	8d a1       	ldd	r24, Y+37	; 0x25
    188e:	9e a1       	ldd	r25, Y+38	; 0x26
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <main+0x88>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9a a3       	std	Y+34, r25	; 0x22
    18a6:	89 a3       	std	Y+33, r24	; 0x21
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <main+0x106>
	else if (__tmp > 65535)
    18aa:	6b a1       	ldd	r22, Y+35	; 0x23
    18ac:	7c a1       	ldd	r23, Y+36	; 0x24
    18ae:	8d a1       	ldd	r24, Y+37	; 0x25
    18b0:	9e a1       	ldd	r25, Y+38	; 0x26
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	6f a1       	ldd	r22, Y+39	; 0x27
    18c4:	78 a5       	ldd	r23, Y+40	; 0x28
    18c6:	89 a5       	ldd	r24, Y+41	; 0x29
    18c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9a a3       	std	Y+34, r25	; 0x22
    18e8:	89 a3       	std	Y+33, r24	; 0x21
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <main+0xe8>
    18ec:	89 e1       	ldi	r24, 0x19	; 25
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	98 a3       	std	Y+32, r25	; 0x20
    18f2:	8f 8f       	std	Y+31, r24	; 0x1f
    18f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f6:	98 a1       	ldd	r25, Y+32	; 0x20
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <main+0xd6>
    18fc:	98 a3       	std	Y+32, r25	; 0x20
    18fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	89 a1       	ldd	r24, Y+33	; 0x21
    1902:	9a a1       	ldd	r25, Y+34	; 0x22
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9a a3       	std	Y+34, r25	; 0x22
    1908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	89 a1       	ldd	r24, Y+33	; 0x21
    190c:	9a a1       	ldd	r25, Y+34	; 0x22
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <main+0xca>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9a a3       	std	Y+34, r25	; 0x22
    1926:	89 a3       	std	Y+33, r24	; 0x21
    1928:	89 a1       	ldd	r24, Y+33	; 0x21
    192a:	9a a1       	ldd	r25, Y+34	; 0x22
    192c:	9e 8f       	std	Y+30, r25	; 0x1e
    192e:	8d 8f       	std	Y+29, r24	; 0x1d
    1930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <main+0x112>
    1938:	9e 8f       	std	Y+30, r25	; 0x1e
    193a:	8d 8f       	std	Y+29, r24	; 0x1d
		 * 	 c.compare two arrays if matched saved password not go back to step a
		 * 3-reset operation to make user choose operation
		 * 	 a.'+' Open Door
		 * 	 b.'-' Change password
		 */
		if ((pressedKey >= 0) && (pressedKey <= 9) && count < PASSWORD_SIZE) {
    193c:	8d a5       	ldd	r24, Y+45	; 0x2d
    193e:	8a 30       	cpi	r24, 0x0A	; 10
    1940:	08 f0       	brcs	.+2      	; 0x1944 <main+0x122>
    1942:	8a c1       	rjmp	.+788    	; 0x1c58 <main+0x436>
    1944:	80 91 34 01 	lds	r24, 0x0134
    1948:	88 30       	cpi	r24, 0x08	; 8
    194a:	08 f0       	brcs	.+2      	; 0x194e <main+0x12c>
    194c:	85 c1       	rjmp	.+778    	; 0x1c58 <main+0x436>
			if (operation == '-') {
    194e:	80 91 33 01 	lds	r24, 0x0133
    1952:	8d 32       	cpi	r24, 0x2D	; 45
    1954:	09 f0       	breq	.+2      	; 0x1958 <main+0x136>
    1956:	80 c1       	rjmp	.+768    	; 0x1c58 <main+0x436>
				if (isPassword) {
    1958:	8f a5       	ldd	r24, Y+47	; 0x2f
    195a:	88 23       	and	r24, r24
    195c:	51 f1       	breq	.+84     	; 0x19b2 <main+0x190>
					password[count] = pressedKey; //add element to array
    195e:	80 91 34 01 	lds	r24, 0x0134
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	ce 01       	movw	r24, r28
    1968:	c0 96       	adiw	r24, 0x30	; 48
    196a:	fc 01       	movw	r30, r24
    196c:	e2 0f       	add	r30, r18
    196e:	f3 1f       	adc	r31, r19
    1970:	8d a5       	ldd	r24, Y+45	; 0x2d
    1972:	80 83       	st	Z, r24
					displayCharacter(pressedKey, count); //display char into LCD
    1974:	90 91 34 01 	lds	r25, 0x0134
    1978:	8d a5       	ldd	r24, Y+45	; 0x2d
    197a:	69 2f       	mov	r22, r25
    197c:	0e 94 cc 10 	call	0x2198	; 0x2198 <displayCharacter>
					count++; //move to next position in array
    1980:	80 91 34 01 	lds	r24, 0x0134
    1984:	8f 5f       	subi	r24, 0xFF	; 255
    1986:	80 93 34 01 	sts	0x0134, r24
					if (count == PASSWORD_SIZE) { // if array full move to re-password
    198a:	80 91 34 01 	lds	r24, 0x0134
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	09 f0       	breq	.+2      	; 0x1994 <main+0x172>
    1992:	62 c1       	rjmp	.+708    	; 0x1c58 <main+0x436>
						isPassword = FALSE; //rest flag
    1994:	1f a6       	std	Y+47, r1	; 0x2f
						isRePassword = TRUE; //change re-password flag
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8e a7       	std	Y+46, r24	; 0x2e
						count = 0; //rest counter
    199a:	10 92 34 01 	sts	0x0134, r1
						LCD_clearScreen(); //clear LCD
    199e:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, ENTER_YOUR_REPASSWORD); //display message into LCD
    19a2:	2f e6       	ldi	r18, 0x6F	; 111
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
    19b0:	50 cf       	rjmp	.-352    	; 0x1852 <main+0x30>
						continue; //stop this iteration and start over
					}
				} else if (isRePassword) {
    19b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    19b4:	88 23       	and	r24, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <main+0x198>
    19b8:	4f c1       	rjmp	.+670    	; 0x1c58 <main+0x436>
					re_password[count] = pressedKey; //add element to array
    19ba:	80 91 34 01 	lds	r24, 0x0134
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	ce 01       	movw	r24, r28
    19c4:	c8 96       	adiw	r24, 0x38	; 56
    19c6:	fc 01       	movw	r30, r24
    19c8:	e2 0f       	add	r30, r18
    19ca:	f3 1f       	adc	r31, r19
    19cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ce:	80 83       	st	Z, r24
					displayCharacter(pressedKey, count); //display char into LCD
    19d0:	90 91 34 01 	lds	r25, 0x0134
    19d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19d6:	69 2f       	mov	r22, r25
    19d8:	0e 94 cc 10 	call	0x2198	; 0x2198 <displayCharacter>
					count++; //move to next position in array
    19dc:	80 91 34 01 	lds	r24, 0x0134
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	80 93 34 01 	sts	0x0134, r24
					if (count == PASSWORD_SIZE) { // if array full check matched between two array
    19e6:	80 91 34 01 	lds	r24, 0x0134
    19ea:	88 30       	cpi	r24, 0x08	; 8
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <main+0x1ce>
    19ee:	34 c1       	rjmp	.+616    	; 0x1c58 <main+0x436>
						isRePassword = FALSE; //rest flag
    19f0:	1e a6       	std	Y+46, r1	; 0x2e
						count = 0; //rest counter
    19f2:	10 92 34 01 	sts	0x0134, r1
						isPassword = TRUE; //rest flag
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	8f a7       	std	Y+47, r24	; 0x2f
						isRePassword = FALSE; //rest flag
    19fa:	1e a6       	std	Y+46, r1	; 0x2e
						/* 1-check if password match,save password
						 * 2-if not go to step 1
						 * */
						if (checkPassword(password, re_password)) {
    19fc:	ce 01       	movw	r24, r28
    19fe:	c0 96       	adiw	r24, 0x30	; 48
    1a00:	9e 01       	movw	r18, r28
    1a02:	28 5c       	subi	r18, 0xC8	; 200
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	b9 01       	movw	r22, r18
    1a08:	0e 94 91 10 	call	0x2122	; 0x2122 <checkPassword>
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <main+0x1f0>
    1a10:	9f c0       	rjmp	.+318    	; 0x1b50 <main+0x32e>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a6 e1       	ldi	r26, 0x16	; 22
    1a18:	b3 e4       	ldi	r27, 0x43	; 67
    1a1a:	89 8f       	std	Y+25, r24	; 0x19
    1a1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	69 8d       	ldd	r22, Y+25	; 0x19
    1a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a e7       	ldi	r20, 0x7A	; 122
    1a30:	53 e4       	ldi	r21, 0x43	; 67
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8d 8b       	std	Y+21, r24	; 0x15
    1a3c:	9e 8b       	std	Y+22, r25	; 0x16
    1a3e:	af 8b       	std	Y+23, r26	; 0x17
    1a40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a42:	6d 89       	ldd	r22, Y+21	; 0x15
    1a44:	7e 89       	ldd	r23, Y+22	; 0x16
    1a46:	8f 89       	ldd	r24, Y+23	; 0x17
    1a48:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <main+0x242>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <main+0x2c0>
	else if (__tmp > 65535)
    1a64:	6d 89       	ldd	r22, Y+21	; 0x15
    1a66:	7e 89       	ldd	r23, Y+22	; 0x16
    1a68:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <main+0x2a2>
    1aa6:	89 e1       	ldi	r24, 0x19	; 25
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9a 8b       	std	Y+18, r25	; 0x12
    1aac:	89 8b       	std	Y+17, r24	; 0x11
    1aae:	89 89       	ldd	r24, Y+17	; 0x11
    1ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <main+0x290>
    1ab6:	9a 8b       	std	Y+18, r25	; 0x12
    1ab8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	8b 89       	ldd	r24, Y+19	; 0x13
    1abc:	9c 89       	ldd	r25, Y+20	; 0x14
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9c 8b       	std	Y+20, r25	; 0x14
    1ac2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <main+0x284>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	98 8b       	std	Y+16, r25	; 0x10
    1ae8:	8f 87       	std	Y+15, r24	; 0x0f
    1aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aec:	98 89       	ldd	r25, Y+16	; 0x10
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <main+0x2cc>
    1af2:	98 8b       	std	Y+16, r25	; 0x10
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(150);
							LCD_clearScreen(); //display message into LCD
    1af6:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 0, PASSWORD_MATCHED); //display message into LCD
    1afa:	21 e8       	ldi	r18, 0x81	; 129
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	a9 01       	movw	r20, r18
    1b04:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 0, LOADING); //display message into LCD
    1b08:	22 e9       	ldi	r18, 0x92	; 146
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	a9 01       	movw	r20, r18
    1b12:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
							for (int i = 0; i < PASSWORD_SIZE; ++i) {
    1b16:	1c a6       	std	Y+44, r1	; 0x2c
    1b18:	1b a6       	std	Y+43, r1	; 0x2b
    1b1a:	0f c0       	rjmp	.+30     	; 0x1b3a <main+0x318>
								sendDataToSecondMircoController(password[i]); //send char to second Mirco-control
    1b1c:	2b a5       	ldd	r18, Y+43	; 0x2b
    1b1e:	3c a5       	ldd	r19, Y+44	; 0x2c
    1b20:	ce 01       	movw	r24, r28
    1b22:	c0 96       	adiw	r24, 0x30	; 48
    1b24:	fc 01       	movw	r30, r24
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	80 81       	ld	r24, Z
    1b2c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendDataToSecondMircoController>
						if (checkPassword(password, re_password)) {
							_delay_ms(150);
							LCD_clearScreen(); //display message into LCD
							LCD_displayStringRowColumn(0, 0, PASSWORD_MATCHED); //display message into LCD
							LCD_displayStringRowColumn(1, 0, LOADING); //display message into LCD
							for (int i = 0; i < PASSWORD_SIZE; ++i) {
    1b30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b32:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	9c a7       	std	Y+44, r25	; 0x2c
    1b38:	8b a7       	std	Y+43, r24	; 0x2b
    1b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3e:	88 30       	cpi	r24, 0x08	; 8
    1b40:	91 05       	cpc	r25, r1
    1b42:	64 f3       	brlt	.-40     	; 0x1b1c <main+0x2fa>
								sendDataToSecondMircoController(password[i]); //send char to second Mirco-control
							}
							sendDataToSecondMircoController(13); //notify second Mirco-control to save data it's like enter
    1b44:	8d e0       	ldi	r24, 0x0D	; 13
    1b46:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendDataToSecondMircoController>
							operation = 0; //rest operation
    1b4a:	10 92 33 01 	sts	0x0133, r1
    1b4e:	81 ce       	rjmp	.-766    	; 0x1852 <main+0x30>
							continue; //stop this iteration and start over
						} else {
							LCD_clearScreen(); //clear LCD
    1b50:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 0,
    1b54:	2c e9       	ldi	r18, 0x9C	; 156
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a8 e4       	ldi	r26, 0x48	; 72
    1b68:	b3 e4       	ldi	r27, 0x43	; 67
    1b6a:	8b 87       	std	Y+11, r24	; 0x0b
    1b6c:	9c 87       	std	Y+12, r25	; 0x0c
    1b6e:	ad 87       	std	Y+13, r26	; 0x0d
    1b70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a e7       	ldi	r20, 0x7A	; 122
    1b80:	53 e4       	ldi	r21, 0x43	; 67
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	8f 83       	std	Y+7, r24	; 0x07
    1b8c:	98 87       	std	Y+8, r25	; 0x08
    1b8e:	a9 87       	std	Y+9, r26	; 0x09
    1b90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <main+0x392>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <main+0x410>
	else if (__tmp > 65535)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <main+0x3f2>
    1bf6:	89 e1       	ldi	r24, 0x19	; 25
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9c 83       	std	Y+4, r25	; 0x04
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <main+0x3e0>
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <main+0x3d4>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	9a 83       	std	Y+2, r25	; 0x02
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <main+0x41c>
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
							NOT_PASSWORD_MATCHED); //display message into LCD
							_delay_ms(200);
							LCD_clearScreen(); //clear LCD
    1c46:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 0,
    1c4a:	20 e6       	ldi	r18, 0x60	; 96
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	a9 01       	movw	r20, r18
    1c54:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
			} else {

			}
		}
		//Check operation if 0 get operation or if '+' get pressed password and send it to second mirco-control
		if (operation == 0) {
    1c58:	80 91 33 01 	lds	r24, 0x0133
    1c5c:	88 23       	and	r24, r24
    1c5e:	59 f5       	brne	.+86     	; 0x1cb6 <main+0x494>
			//Check operation if between + or - send operation not display error massage to user
			if (pressedKey == '+' || pressedKey == '-') {
    1c60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c62:	8b 32       	cpi	r24, 0x2B	; 43
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <main+0x44a>
    1c66:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c68:	8d 32       	cpi	r24, 0x2D	; 45
    1c6a:	81 f4       	brne	.+32     	; 0x1c8c <main+0x46a>
				UART_sendByte(pressedKey); //Send operation to second mirco-control
    1c6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c6e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <UART_sendByte>
				operation = pressedKey; //assign operation
    1c72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c74:	80 93 33 01 	sts	0x0133, r24
				LCD_clearScreen(); //clear LCD
    1c78:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, ENTER_YOUR_PASSWORD); //display message into LCD
    1c7c:	20 e6       	ldi	r18, 0x60	; 96
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	a9 01       	movw	r20, r18
    1c86:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
    1c8a:	e3 cd       	rjmp	.-1082   	; 0x1852 <main+0x30>
			} else if ((pressedKey >= 0) && (pressedKey <= 9)) {
    1c8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c8e:	8a 30       	cpi	r24, 0x0A	; 10
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <main+0x472>
    1c92:	df cd       	rjmp	.-1090   	; 0x1852 <main+0x30>
				LCD_clearScreen(); //clear LCD
    1c94:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, CHOOSE_RIGHT); //display message into LCD
    1c98:	28 ea       	ldi	r18, 0xA8	; 168
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	a9 01       	movw	r20, r18
    1ca2:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, OPERTAION); //display message into LCD
    1ca6:	25 eb       	ldi	r18, 0xB5	; 181
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
    1cb4:	ce cd       	rjmp	.-1124   	; 0x1852 <main+0x30>
			} else {

			}
		} else if (operation == '+') {
    1cb6:	80 91 33 01 	lds	r24, 0x0133
    1cba:	8b 32       	cpi	r24, 0x2B	; 43
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <main+0x49e>
    1cbe:	c9 cd       	rjmp	.-1134   	; 0x1852 <main+0x30>
			if ((pressedKey >= 0) && (pressedKey <= 9) && count < PASSWORD_SIZE) { //check if pressed key is number and Counter small than Password size
    1cc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc2:	8a 30       	cpi	r24, 0x0A	; 10
    1cc4:	50 f4       	brcc	.+20     	; 0x1cda <main+0x4b8>
    1cc6:	80 91 34 01 	lds	r24, 0x0134
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	30 f4       	brcc	.+12     	; 0x1cda <main+0x4b8>
				displayCharacter(pressedKey, count); //display char into LCD
    1cce:	90 91 34 01 	lds	r25, 0x0134
    1cd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cd4:	69 2f       	mov	r22, r25
    1cd6:	0e 94 cc 10 	call	0x2198	; 0x2198 <displayCharacter>
			} else {

			}
			sendDataToSecondMircoController(pressedKey); //send char to second Mirco-control
    1cda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cdc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendDataToSecondMircoController>
    1ce0:	b8 cd       	rjmp	.-1168   	; 0x1852 <main+0x30>

00001ce2 <sendDataToSecondMircoController>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: responsible to send data to Second MircoController
 **********************************************************************************/
static void sendDataToSecondMircoController(uint8 pressedKey) {
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	6d 97       	sbiw	r28, 0x1d	; 29
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	8d 8f       	std	Y+29, r24	; 0x1d
	static uint8 responeCode;
	if ((pressedKey >= 0) && (pressedKey <= 9) && count < PASSWORD_SIZE) {
    1cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfa:	8a 30       	cpi	r24, 0x0A	; 10
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <sendDataToSecondMircoController+0x1e>
    1cfe:	80 c0       	rjmp	.+256    	; 0x1e00 <sendDataToSecondMircoController+0x11e>
    1d00:	80 91 34 01 	lds	r24, 0x0134
    1d04:	88 30       	cpi	r24, 0x08	; 8
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <sendDataToSecondMircoController+0x28>
    1d08:	7b c0       	rjmp	.+246    	; 0x1e00 <sendDataToSecondMircoController+0x11e>
		UART_sendByte(pressedKey); //send the pressed pressedKey to the second MC using uart
    1d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <UART_sendByte>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	aa ef       	ldi	r26, 0xFA	; 250
    1d16:	b3 e4       	ldi	r27, 0x43	; 67
    1d18:	89 8f       	std	Y+25, r24	; 0x19
    1d1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	53 e4       	ldi	r21, 0x43	; 67
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8d 8b       	std	Y+21, r24	; 0x15
    1d3a:	9e 8b       	std	Y+22, r25	; 0x16
    1d3c:	af 8b       	std	Y+23, r26	; 0x17
    1d3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d40:	6d 89       	ldd	r22, Y+21	; 0x15
    1d42:	7e 89       	ldd	r23, Y+22	; 0x16
    1d44:	8f 89       	ldd	r24, Y+23	; 0x17
    1d46:	98 8d       	ldd	r25, Y+24	; 0x18
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <sendDataToSecondMircoController+0x80>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <sendDataToSecondMircoController+0xfe>
	else if (__tmp > 65535)
    1d62:	6d 89       	ldd	r22, Y+21	; 0x15
    1d64:	7e 89       	ldd	r23, Y+22	; 0x16
    1d66:	8f 89       	ldd	r24, Y+23	; 0x17
    1d68:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <sendDataToSecondMircoController+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9c 8b       	std	Y+20, r25	; 0x14
    1da0:	8b 8b       	std	Y+19, r24	; 0x13
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <sendDataToSecondMircoController+0xe0>
    1da4:	89 e1       	ldi	r24, 0x19	; 25
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9a 8b       	std	Y+18, r25	; 0x12
    1daa:	89 8b       	std	Y+17, r24	; 0x11
    1dac:	89 89       	ldd	r24, Y+17	; 0x11
    1dae:	9a 89       	ldd	r25, Y+18	; 0x12
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <sendDataToSecondMircoController+0xce>
    1db4:	9a 8b       	std	Y+18, r25	; 0x12
    1db6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <sendDataToSecondMircoController+0xc2>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <sendDataToSecondMircoController+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9c 8b       	std	Y+20, r25	; 0x14
    1dde:	8b 8b       	std	Y+19, r24	; 0x13
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	98 8b       	std	Y+16, r25	; 0x10
    1de6:	8f 87       	std	Y+15, r24	; 0x0f
    1de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dea:	98 89       	ldd	r25, Y+16	; 0x10
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <sendDataToSecondMircoController+0x10a>
    1df0:	98 8b       	std	Y+16, r25	; 0x10
    1df2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		count++; //move to next position in array
    1df4:	80 91 34 01 	lds	r24, 0x0134
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	80 93 34 01 	sts	0x0134, r24
    1dfe:	ef c0       	rjmp	.+478    	; 0x1fde <sendDataToSecondMircoController+0x2fc>
	} else if (pressedKey == 13) {
    1e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e02:	8d 30       	cpi	r24, 0x0D	; 13
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <sendDataToSecondMircoController+0x126>
    1e06:	eb c0       	rjmp	.+470    	; 0x1fde <sendDataToSecondMircoController+0x2fc>
		if (count < PASSWORD_SIZE) {
    1e08:	80 91 34 01 	lds	r24, 0x0134
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	40 f4       	brcc	.+16     	; 0x1e20 <sendDataToSecondMircoController+0x13e>
			LCD_displayStringRowColumn(0, 0, PASSWORD_ERROR_MSSAGE); //display message into LCD
    1e10:	2f eb       	ldi	r18, 0xBF	; 191
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	a9 01       	movw	r20, r18
    1e1a:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
    1e1e:	df c0       	rjmp	.+446    	; 0x1fde <sendDataToSecondMircoController+0x2fc>
		} else if (count == PASSWORD_SIZE) {
    1e20:	80 91 34 01 	lds	r24, 0x0134
    1e24:	88 30       	cpi	r24, 0x08	; 8
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <sendDataToSecondMircoController+0x148>
    1e28:	da c0       	rjmp	.+436    	; 0x1fde <sendDataToSecondMircoController+0x2fc>
			UART_sendByte(pressedKey); //send the pressed pressedKey to the second MC using uart
    1e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <UART_sendByte>
			responeCode = UART_recieveByte(); //Response from second mirco-control
    1e30:	0e 94 d4 05 	call	0xba8	; 0xba8 <UART_recieveByte>
    1e34:	80 93 35 01 	sts	0x0135, r24
			LCD_clearScreen(); //clear LCD
    1e38:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
			if (responeCode == 1 && firstTime) { //password saved
    1e3c:	80 91 35 01 	lds	r24, 0x0135
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	71 f4       	brne	.+28     	; 0x1e60 <sendDataToSecondMircoController+0x17e>
    1e44:	80 91 32 01 	lds	r24, 0x0132
    1e48:	88 23       	and	r24, r24
    1e4a:	51 f0       	breq	.+20     	; 0x1e60 <sendDataToSecondMircoController+0x17e>
				LCD_displayStringRowColumn(0, 0, DATA_SAVED); //display message into LCD
    1e4c:	2f ec       	ldi	r18, 0xCF	; 207
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
				restLcd(); //rest LCD
    1e5a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <restLcd>
    1e5e:	b9 c0       	rjmp	.+370    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
			} else if (responeCode == 1 && operation == '+') { //Correct password
    1e60:	80 91 35 01 	lds	r24, 0x0135
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	99 f4       	brne	.+38     	; 0x1e8e <sendDataToSecondMircoController+0x1ac>
    1e68:	80 91 33 01 	lds	r24, 0x0133
    1e6c:	8b 32       	cpi	r24, 0x2B	; 43
    1e6e:	79 f4       	brne	.+30     	; 0x1e8e <sendDataToSecondMircoController+0x1ac>
				LCD_displayStringRowColumn(0, 0, WECLOME); //display message into LCD
    1e70:	2c ed       	ldi	r18, 0xDC	; 220
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
				if (UART_recieveByte()) { //door open for 1 minute so waiting until second  mirco-control send flag
    1e7e:	0e 94 d4 05 	call	0xba8	; 0xba8 <UART_recieveByte>
    1e82:	88 23       	and	r24, r24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <sendDataToSecondMircoController+0x1a6>
    1e86:	a5 c0       	rjmp	.+330    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
					restLcd(); //rest LCD
    1e88:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <restLcd>
    1e8c:	a2 c0       	rjmp	.+324    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
				}
			} else if (responeCode == 1 && operation == '-') { //password changed successfully
    1e8e:	80 91 35 01 	lds	r24, 0x0135
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	71 f4       	brne	.+28     	; 0x1eb2 <sendDataToSecondMircoController+0x1d0>
    1e96:	80 91 33 01 	lds	r24, 0x0133
    1e9a:	8d 32       	cpi	r24, 0x2D	; 45
    1e9c:	51 f4       	brne	.+20     	; 0x1eb2 <sendDataToSecondMircoController+0x1d0>
				LCD_displayStringRowColumn(0, 0, CHANAGE_PASSWORD); //display message into LCD
    1e9e:	27 ee       	ldi	r18, 0xE7	; 231
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	a9 01       	movw	r20, r18
    1ea8:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
				restLcd(); //rest LCD
    1eac:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <restLcd>
    1eb0:	90 c0       	rjmp	.+288    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
			} else if (responeCode == 0 && operation == '+') { //Wrong password
    1eb2:	80 91 35 01 	lds	r24, 0x0135
    1eb6:	88 23       	and	r24, r24
    1eb8:	71 f4       	brne	.+28     	; 0x1ed6 <sendDataToSecondMircoController+0x1f4>
    1eba:	80 91 33 01 	lds	r24, 0x0133
    1ebe:	8b 32       	cpi	r24, 0x2B	; 43
    1ec0:	51 f4       	brne	.+20     	; 0x1ed6 <sendDataToSecondMircoController+0x1f4>
				LCD_displayStringRowColumn(0, 0, WRONG_TRY_AGAIN); //display message into LCD
    1ec2:	26 ef       	ldi	r18, 0xF6	; 246
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	a9 01       	movw	r20, r18
    1ecc:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
				count = 0; //rest count
    1ed0:	10 92 34 01 	sts	0x0134, r1
    1ed4:	7e c0       	rjmp	.+252    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
			} else if (responeCode == 2 && operation == '+') { //Password enter wrong 2 times
    1ed6:	80 91 35 01 	lds	r24, 0x0135
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <sendDataToSecondMircoController+0x1fe>
    1ede:	79 c0       	rjmp	.+242    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
    1ee0:	80 91 33 01 	lds	r24, 0x0133
    1ee4:	8b 32       	cpi	r24, 0x2B	; 43
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <sendDataToSecondMircoController+0x208>
    1ee8:	74 c0       	rjmp	.+232    	; 0x1fd2 <sendDataToSecondMircoController+0x2f0>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	aa ef       	ldi	r26, 0xFA	; 250
    1ef0:	b3 e4       	ldi	r27, 0x43	; 67
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	9c 87       	std	Y+12, r25	; 0x0c
    1ef6:	ad 87       	std	Y+13, r26	; 0x0d
    1ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	53 e4       	ldi	r21, 0x43	; 67
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8f 83       	std	Y+7, r24	; 0x07
    1f14:	98 87       	std	Y+8, r25	; 0x08
    1f16:	a9 87       	std	Y+9, r26	; 0x09
    1f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <sendDataToSecondMircoController+0x25a>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <sendDataToSecondMircoController+0x2d8>
	else if (__tmp > 65535)
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <sendDataToSecondMircoController+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <sendDataToSecondMircoController+0x2ba>
    1f7e:	89 e1       	ldi	r24, 0x19	; 25
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <sendDataToSecondMircoController+0x2a8>
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <sendDataToSecondMircoController+0x29c>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <sendDataToSecondMircoController+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <sendDataToSecondMircoController+0x2e4>
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				restLcd(); //rest LCD
    1fce:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <restLcd>
			} else {

			}
			if (firstTime)
    1fd2:	80 91 32 01 	lds	r24, 0x0132
    1fd6:	88 23       	and	r24, r24
    1fd8:	11 f0       	breq	.+4      	; 0x1fde <sendDataToSecondMircoController+0x2fc>
				firstTime = FALSE; //rest flag
    1fda:	10 92 32 01 	sts	0x0132, r1
		}

	} else {
	}

}
    1fde:	6d 96       	adiw	r28, 0x1d	; 29
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <restLcd>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: None
 * Description: responsible the rest LCD and display choose to the user
 **********************************************************************************/
static void restLcd() {
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	2e 97       	sbiw	r28, 0x0e	; 14
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	aa ef       	ldi	r26, 0xFA	; 250
    200a:	b3 e4       	ldi	r27, 0x43	; 67
    200c:	8b 87       	std	Y+11, r24	; 0x0b
    200e:	9c 87       	std	Y+12, r25	; 0x0c
    2010:	ad 87       	std	Y+13, r26	; 0x0d
    2012:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6b 85       	ldd	r22, Y+11	; 0x0b
    2016:	7c 85       	ldd	r23, Y+12	; 0x0c
    2018:	8d 85       	ldd	r24, Y+13	; 0x0d
    201a:	9e 85       	ldd	r25, Y+14	; 0x0e
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8f 83       	std	Y+7, r24	; 0x07
    202e:	98 87       	std	Y+8, r25	; 0x08
    2030:	a9 87       	std	Y+9, r26	; 0x09
    2032:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <restLcd+0x66>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <restLcd+0xe4>
	else if (__tmp > 65535)
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <restLcd+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2070:	7c 85       	ldd	r23, Y+12	; 0x0c
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <restLcd+0xc6>
    2098:	89 e1       	ldi	r24, 0x19	; 25
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9c 83       	std	Y+4, r25	; 0x04
    209e:	8b 83       	std	Y+3, r24	; 0x03
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <restLcd+0xb4>
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <restLcd+0xa8>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <restLcd+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <restLcd+0xf0>
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen(); //rest LCD
    20e8:	0e 94 09 0b 	call	0x1612	; 0x1612 <LCD_clearScreen>
	count = 0; //rest count
    20ec:	10 92 34 01 	sts	0x0134, r1
	operation = 0; //rest operation
    20f0:	10 92 33 01 	sts	0x0133, r1
	LCD_displayStringRowColumn(0, 0, OPEN_DOOR); //display message into LCD
    20f4:	26 e0       	ldi	r18, 0x06	; 6
    20f6:	31 e0       	ldi	r19, 0x01	; 1
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	a9 01       	movw	r20, r18
    20fe:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, CHANGE_PASSWORD); //display message into LCD
    2102:	26 e1       	ldi	r18, 0x16	; 22
    2104:	31 e0       	ldi	r19, 0x01	; 1
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
}
    2110:	2e 96       	adiw	r28, 0x0e	; 14
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <checkPassword>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: boolean
 * Description: responsible to check password and re-password matched or not
 **********************************************************************************/
static bool checkPassword(uint8 password[], uint8 re_password[]) {
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	27 97       	sbiw	r28, 0x07	; 7
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	8b 83       	std	Y+3, r24	; 0x03
    213a:	7e 83       	std	Y+6, r23	; 0x06
    213c:	6d 83       	std	Y+5, r22	; 0x05
	for (int i = 0; i < PASSWORD_SIZE; ++i) {
    213e:	1a 82       	std	Y+2, r1	; 0x02
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	19 c0       	rjmp	.+50     	; 0x2176 <checkPassword+0x54>
		if (password[i] != re_password[i])
    2144:	29 81       	ldd	r18, Y+1	; 0x01
    2146:	3a 81       	ldd	r19, Y+2	; 0x02
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	40 81       	ld	r20, Z
    2154:	29 81       	ldd	r18, Y+1	; 0x01
    2156:	3a 81       	ldd	r19, Y+2	; 0x02
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	fc 01       	movw	r30, r24
    215e:	e2 0f       	add	r30, r18
    2160:	f3 1f       	adc	r31, r19
    2162:	80 81       	ld	r24, Z
    2164:	48 17       	cp	r20, r24
    2166:	11 f0       	breq	.+4      	; 0x216c <checkPassword+0x4a>
			return FALSE;
    2168:	1f 82       	std	Y+7, r1	; 0x07
    216a:	0c c0       	rjmp	.+24     	; 0x2184 <checkPassword+0x62>
 * Parameters (out): None
 * Return value: boolean
 * Description: responsible to check password and re-password matched or not
 **********************************************************************************/
static bool checkPassword(uint8 password[], uint8 re_password[]) {
	for (int i = 0; i < PASSWORD_SIZE; ++i) {
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	88 30       	cpi	r24, 0x08	; 8
    217c:	91 05       	cpc	r25, r1
    217e:	14 f3       	brlt	.-60     	; 0x2144 <checkPassword+0x22>
			return FALSE;
		else {

		}
	}
	return TRUE;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2186:	27 96       	adiw	r28, 0x07	; 7
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <displayCharacter>:
 * Parameters (inout): None
 * Parameters (out): None
 * Return value: none
 * Description: responsible to display pressed key and replace it with *
 **********************************************************************************/
static void displayCharacter(uint8 pressedKey, uint8 count) {
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	60 97       	sbiw	r28, 0x10	; 16
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	8f 87       	std	Y+15, r24	; 0x0f
    21ae:	68 8b       	std	Y+16, r22	; 0x10
	LCD_goToRowColumn(1, count);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	68 89       	ldd	r22, Y+16	; 0x10
    21b4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_goToRowColumn>
	LCD_intgerToString(pressedKey); //display integer into LCD
    21b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LCD_intgerToString>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a6 e1       	ldi	r26, 0x16	; 22
    21c8:	b3 e4       	ldi	r27, 0x43	; 67
    21ca:	8b 87       	std	Y+11, r24	; 0x0b
    21cc:	9c 87       	std	Y+12, r25	; 0x0c
    21ce:	ad 87       	std	Y+13, r26	; 0x0d
    21d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a e7       	ldi	r20, 0x7A	; 122
    21e0:	53 e4       	ldi	r21, 0x43	; 67
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8f 83       	std	Y+7, r24	; 0x07
    21ec:	98 87       	std	Y+8, r25	; 0x08
    21ee:	a9 87       	std	Y+9, r26	; 0x09
    21f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <displayCharacter+0x7c>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <displayCharacter+0xfa>
	else if (__tmp > 65535)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <displayCharacter+0xdc>
    2256:	89 e1       	ldi	r24, 0x19	; 25
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <displayCharacter+0xca>
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <displayCharacter+0xbe>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <displayCharacter+0x106>
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(150);
	LCD_displayStringRowColumn(1, count, "*"); //display the '*'
    22a6:	28 e2       	ldi	r18, 0x28	; 40
    22a8:	31 e0       	ldi	r19, 0x01	; 1
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	68 89       	ldd	r22, Y+16	; 0x10
    22ae:	a9 01       	movw	r20, r18
    22b0:	0e 94 cd 0a 	call	0x159a	; 0x159a <LCD_displayStringRowColumn>
}
    22b4:	60 96       	adiw	r28, 0x10	; 16
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <__prologue_saves__>:
    22c6:	2f 92       	push	r2
    22c8:	3f 92       	push	r3
    22ca:	4f 92       	push	r4
    22cc:	5f 92       	push	r5
    22ce:	6f 92       	push	r6
    22d0:	7f 92       	push	r7
    22d2:	8f 92       	push	r8
    22d4:	9f 92       	push	r9
    22d6:	af 92       	push	r10
    22d8:	bf 92       	push	r11
    22da:	cf 92       	push	r12
    22dc:	df 92       	push	r13
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	ca 1b       	sub	r28, r26
    22f0:	db 0b       	sbc	r29, r27
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	09 94       	ijmp

000022fe <__epilogue_restores__>:
    22fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2300:	39 88       	ldd	r3, Y+17	; 0x11
    2302:	48 88       	ldd	r4, Y+16	; 0x10
    2304:	5f 84       	ldd	r5, Y+15	; 0x0f
    2306:	6e 84       	ldd	r6, Y+14	; 0x0e
    2308:	7d 84       	ldd	r7, Y+13	; 0x0d
    230a:	8c 84       	ldd	r8, Y+12	; 0x0c
    230c:	9b 84       	ldd	r9, Y+11	; 0x0b
    230e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2310:	b9 84       	ldd	r11, Y+9	; 0x09
    2312:	c8 84       	ldd	r12, Y+8	; 0x08
    2314:	df 80       	ldd	r13, Y+7	; 0x07
    2316:	ee 80       	ldd	r14, Y+6	; 0x06
    2318:	fd 80       	ldd	r15, Y+5	; 0x05
    231a:	0c 81       	ldd	r16, Y+4	; 0x04
    231c:	1b 81       	ldd	r17, Y+3	; 0x03
    231e:	aa 81       	ldd	r26, Y+2	; 0x02
    2320:	b9 81       	ldd	r27, Y+1	; 0x01
    2322:	ce 0f       	add	r28, r30
    2324:	d1 1d       	adc	r29, r1
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	ed 01       	movw	r28, r26
    2332:	08 95       	ret

00002334 <itoa>:
    2334:	fb 01       	movw	r30, r22
    2336:	9f 01       	movw	r18, r30
    2338:	e8 94       	clt
    233a:	42 30       	cpi	r20, 0x02	; 2
    233c:	c4 f0       	brlt	.+48     	; 0x236e <itoa+0x3a>
    233e:	45 32       	cpi	r20, 0x25	; 37
    2340:	b4 f4       	brge	.+44     	; 0x236e <itoa+0x3a>
    2342:	4a 30       	cpi	r20, 0x0A	; 10
    2344:	29 f4       	brne	.+10     	; 0x2350 <itoa+0x1c>
    2346:	97 fb       	bst	r25, 7
    2348:	1e f4       	brtc	.+6      	; 0x2350 <itoa+0x1c>
    234a:	90 95       	com	r25
    234c:	81 95       	neg	r24
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	64 2f       	mov	r22, r20
    2352:	77 27       	eor	r23, r23
    2354:	0e 94 cb 11 	call	0x2396	; 0x2396 <__udivmodhi4>
    2358:	80 5d       	subi	r24, 0xD0	; 208
    235a:	8a 33       	cpi	r24, 0x3A	; 58
    235c:	0c f0       	brlt	.+2      	; 0x2360 <itoa+0x2c>
    235e:	89 5d       	subi	r24, 0xD9	; 217
    2360:	81 93       	st	Z+, r24
    2362:	cb 01       	movw	r24, r22
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	a1 f7       	brne	.-24     	; 0x2350 <itoa+0x1c>
    2368:	16 f4       	brtc	.+4      	; 0x236e <itoa+0x3a>
    236a:	5d e2       	ldi	r21, 0x2D	; 45
    236c:	51 93       	st	Z+, r21
    236e:	10 82       	st	Z, r1
    2370:	c9 01       	movw	r24, r18
    2372:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <strrev>

00002376 <strrev>:
    2376:	dc 01       	movw	r26, r24
    2378:	fc 01       	movw	r30, r24
    237a:	67 2f       	mov	r22, r23
    237c:	71 91       	ld	r23, Z+
    237e:	77 23       	and	r23, r23
    2380:	e1 f7       	brne	.-8      	; 0x237a <strrev+0x4>
    2382:	32 97       	sbiw	r30, 0x02	; 2
    2384:	04 c0       	rjmp	.+8      	; 0x238e <strrev+0x18>
    2386:	7c 91       	ld	r23, X
    2388:	6d 93       	st	X+, r22
    238a:	70 83       	st	Z, r23
    238c:	62 91       	ld	r22, -Z
    238e:	ae 17       	cp	r26, r30
    2390:	bf 07       	cpc	r27, r31
    2392:	c8 f3       	brcs	.-14     	; 0x2386 <strrev+0x10>
    2394:	08 95       	ret

00002396 <__udivmodhi4>:
    2396:	aa 1b       	sub	r26, r26
    2398:	bb 1b       	sub	r27, r27
    239a:	51 e1       	ldi	r21, 0x11	; 17
    239c:	07 c0       	rjmp	.+14     	; 0x23ac <__udivmodhi4_ep>

0000239e <__udivmodhi4_loop>:
    239e:	aa 1f       	adc	r26, r26
    23a0:	bb 1f       	adc	r27, r27
    23a2:	a6 17       	cp	r26, r22
    23a4:	b7 07       	cpc	r27, r23
    23a6:	10 f0       	brcs	.+4      	; 0x23ac <__udivmodhi4_ep>
    23a8:	a6 1b       	sub	r26, r22
    23aa:	b7 0b       	sbc	r27, r23

000023ac <__udivmodhi4_ep>:
    23ac:	88 1f       	adc	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	5a 95       	dec	r21
    23b2:	a9 f7       	brne	.-22     	; 0x239e <__udivmodhi4_loop>
    23b4:	80 95       	com	r24
    23b6:	90 95       	com	r25
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	08 95       	ret

000023be <_exit>:
    23be:	f8 94       	cli

000023c0 <__stop_program>:
    23c0:	ff cf       	rjmp	.-2      	; 0x23c0 <__stop_program>
